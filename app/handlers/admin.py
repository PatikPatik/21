from __future__ import annotations
from telegram import Update
from telegram.ext import ContextTypes
import logging, asyncio

log = logging.getLogger(__name__)

def _is_admin(context: ContextTypes.DEFAULT_TYPE, user_id: int) -> bool:
    admins = set(context.application.bot_data.get("admins", []))
    return user_id in admins

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not user or not _is_admin(context, user.id):
        return
    users, msgs = await context.application.bot_data["db"].stats()
    await update.effective_message.reply_text(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}\n‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–π: {msgs}")

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not user or not _is_admin(context, user.id):
        return
    if not context.args:
        await update.effective_message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Ç–µ–∫—Å—Ç>")
        return
    text = " ".join(context.args)

    # –ß–∏—Ç–∞–µ–º –≤—Å–µ chat_id –∏–∑ –ë–î
    db = context.application.bot_data["db"]
    if not db.pool:
        await update.effective_message.reply_text("–ë–î –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞, —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    sent = 0
    async with db.pool.connection() as conn:
        async with conn.cursor() as cur:
            await cur.execute("SELECT chat_id FROM users;")
            rows = await cur.fetchall()
            chat_ids = [int(r[0]) for r in rows]

    # –®–ª–µ–º –ø–æ –ø–∞—Ä—Ç–∏—è–º, —á—Ç–æ–±—ã –Ω–µ —É–ø–µ—Ä–µ—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç—ã
    for chat_id in chat_ids:
        try:
            await context.bot.send_message(chat_id, text)
            sent += 1
            await asyncio.sleep(0.06)  # ~16 msg/sec
        except Exception as e:
            log.warning("broadcast fail chat_id=%s: %s", chat_id, e)

    await update.effective_message.reply_text(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {sent}/{len(chat_ids)}")
